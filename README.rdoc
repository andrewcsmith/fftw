{<img src="https://codeclimate.com/github/thisMagpie/fftw.png" />}[https://codeclimate.com/github/thisMagpie/fftw]
{<img src=https://travis-ci.org/thisMagpie/fftw.png>}[https://travis-ci.org/thisMagpie/fftw.svg?branch=master]

== Install FFTW

Install FFTW on a Mac

```
./configure  --enable-float  --enable-threads
make
sudo  -s  # Type in your root password and hit the enter button)
make  install
```
Now to do the double precision version, we need to clean up the tree.

```
make  distclean
./configure  --enable-threads
make
make  install
```

== FFTW for Linux

```
./configure  --enable-float  --enable-threads
make
su  (Type in your root password and hit the enter button)
make  install
Now to do the double precision version, we need to clean up the tree.

make  distclean
./configure  --enable-threads
make
make  install
```

In order to give SciRuby the capability to handle signal analysis, processing and synthesis via the NMatrix gem or otherwise.
 ```
 [Source](http://www.cems.uvm.edu/~smanchu/fftw_installation.html)

It has been determined that implementing the FFTW3 API in ruby makes it possible to perform operations on NMatrix objects.

Since existing gem called ruby-ffw3 already exists but only works with narray object a fork of this repository needs to be made compatible with NMatrix instead which is what this repository is all about.

```
   Common names:

   R       : real type, aka fftw_real
   E       : real type for local variables (possibly extra precision)
   C       : complex type
   sz      : size
   vecsz   : vector size
   is, os  : input/output stride
   ri, ii  : real/imag input (complex data)
   ro, io  : real/imag output (complex data)
   I, O    : real input/output (real data)
   A       : assert
   CK      : check
   S       : solver, defined internally to each solver file
   P       : plan, defined internally to each solver file
   k       : codelet
   X(...)  : used for mangling of external names (see below)
   K(...)  : floating-point constant, in E precision
```

== Conventions in FFTW

If a name is used often and must have the form fftw_foo to avoid
namespace pollution, #define FOO fftw_foo and use the short name.

Leave that hungarian crap to MS.  foo_t counts as hungarian: use foo instead.

foo is lowercase so that it does not look like a DOS program.

Exception: typedef struct foo_s {...} foo;  instead of:

```
typedef struct foo {...} foo;
```
for C++ compatibility.
----
![SciRuby][5] ![FFTW][6]

![GSoC 2014][7]

[![Donate with Pledgie][8]](https://pledgie.com/campaigns/25892)
==========

1129CMrZkqKt32F5kJhYiNMsfhRnWFEeTA

  [1]: http://i.imgur.com/5SYYd8Q.jpg
  [2]: http://i.imgur.com/5H30L.gif
  [3]: http://www.gnome.org/wp-content/themes/gnome-grass/images/gnome-logo.png
  [4]: https://www.symplicity.com/assets/icon_-_Product_Features_-_Accessibility.png
  [5]: http://sciruby.com/images/logo.png
  [6]: http://fftw.org/fftw-logo-med.gif
  [7]:https://1-ps.googleusercontent.com/sx/s.google-melange.appspot.com/www.google-melange.com/soc/content/2-1-20140626//images/gsoc/logo/landing-page-gsoc2014.png.pagespeed.ce.t4C4svuO-G.png
  [8]: https://pledgie.com/campaigns/25892.png?skin_name=chrome
